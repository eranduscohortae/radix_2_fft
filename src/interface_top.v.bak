`include "constants_uart.vh"


module interface_top(
						input clk,
						input rst,
						input valid_tx_i,
						input valid_rx_i,

						input flag_start_i,
						input flag_sample_valid_i,

						input [15:0] fft_R_coefficient_i,
						input [15:0] fft_I_coefficient_i,

						input [15:0] X_0_R_i,
						input [15:0] X_0_I_i,
						input [15:0] X_1_R_i,
						input [15:0] X_1_I_i,
						input [15:0] X_2_R_i,
						input [15:0] X_2_I_i,
						input [15:0] X_3_R_i,
						input [15:0] X_3_I_i,
						input [15:0] X_4_R_i,
						input [15:0] X_4_I_i,
						input [15:0] X_5_R_i,
						input [15:0] X_5_I_i,
						input [15:0] X_6_R_i,
						input [15:0] X_6_I_i,
						input [15:0] X_7_R_i,
						input [15:0] X_7_I_i,
						input [15:0] X_8_R_i,
						input [15:0] X_8_I_i,
						input [15:0] X_9_R_i,
						input [15:0] X_9_I_i,
						input [15:0] X_10_R_i,
						input [15:0] X_10_I_i,
						input [15:0] X_11_R_i,
						input [15:0] X_11_I_i,
						input [15:0] X_12_R_i,
						input [15:0] X_12_I_i,
						input [15:0] X_13_R_i,
						input [15:0] X_13_I_i,
						input [15:0] X_14_R_i,
						input [15:0] X_14_I_i,
						input [15:0] X_15_R_i,
						input [15:0] X_15_I_i,
						input [15:0] X_16_R_i,
						input [15:0] X_16_I_i,
						input [15:0] X_17_R_i,
						input [15:0] X_17_I_i,
						input [15:0] X_18_R_i,
						input [15:0] X_18_I_i,
						input [15:0] X_19_R_i,
						input [15:0] X_19_I_i,
						input [15:0] X_20_R_i,
						input [15:0] X_20_I_i,
						input [15:0] X_21_R_i,
						input [15:0] X_21_I_i,
						input [15:0] X_22_R_i,
						input [15:0] X_22_I_i,
						input [15:0] X_23_R_i,
						input [15:0] X_23_I_i,
						input [15:0] X_24_R_i,
						input [15:0] X_24_I_i,
						input [15:0] X_25_R_i,
						input [15:0] X_25_I_i,
						input [15:0] X_26_R_i,
						input [15:0] X_26_I_i,
						input [15:0] X_27_R_i,
						input [15:0] X_27_I_i,
						input [15:0] X_28_R_i,
						input [15:0] X_28_I_i,
						input [15:0] X_29_R_i,
						input [15:0] X_29_I_i,
						input [15:0] X_30_R_i,
						input [15:0] X_30_I_i,
						input [15:0] X_31_R_i,
						input [15:0] X_31_I_i,


						output ena_rx_o,
						output ena_tx_o,

						output [7:0] uart_byte_tx_o,
						output valid_o,

						output [15:0] fft_R_sample_o,
						output [15:0] fft_I_sample_o,

						output reg [1:0] fft_select,						

						output [15:0] x_0_R_o,
						output [15:0] x_0_I_o,
						output [15:0] x_1_R_o,
						output [15:0] x_1_I_o,
						output [15:0] x_2_R_o,
						output [15:0] x_2_I_o,
						output [15:0] x_3_R_o,
						output [15:0] x_3_I_o,
						output [15:0] x_4_R_o,
						output [15:0] x_4_I_o,
						output [15:0] x_5_R_o,
						output [15:0] x_5_I_o,
						output [15:0] x_6_R_o,
						output [15:0] x_6_I_o,
						output [15:0] x_7_R_o,
						output [15:0] x_7_I_o,
						output [15:0] x_8_R_o,
						output [15:0] x_8_I_o,
						output [15:0] x_9_R_o,
						output [15:0] x_9_I_o,
						output [15:0] x_10_R_o,
						output [15:0] x_10_I_o,
						output [15:0] x_11_R_o,
						output [15:0] x_11_I_o,
						output [15:0] x_12_R_o,
						output [15:0] x_12_I_o,
						output [15:0] x_13_R_o,
						output [15:0] x_13_I_o,
						output [15:0] x_14_R_o,
						output [15:0] x_14_I_o,
						output [15:0] x_15_R_o,
						output [15:0] x_15_I_o,
						output [15:0] x_16_R_o,
						output [15:0] x_16_I_o,
						output [15:0] x_17_R_o,
						output [15:0] x_17_I_o,
						output [15:0] x_18_R_o,
						output [15:0] x_18_I_o,
						output [15:0] x_19_R_o,
						output [15:0] x_19_I_o,
						output [15:0] x_20_R_o,
						output [15:0] x_20_I_o,
						output [15:0] x_21_R_o,
						output [15:0] x_21_I_o,
						output [15:0] x_22_R_o,
						output [15:0] x_22_I_o,
						output [15:0] x_23_R_o,
						output [15:0] x_23_I_o,
						output [15:0] x_24_R_o,
						output [15:0] x_24_I_o,
						output [15:0] x_25_R_o,
						output [15:0] x_25_I_o,
						output [15:0] x_26_R_o,
						output [15:0] x_26_I_o,
						output [15:0] x_27_R_o,
						output [15:0] x_27_I_o,
						output [15:0] x_28_R_o,
						output [15:0] x_28_I_o,
						output [15:0] x_29_R_o,
						output [15:0] x_29_I_o,
						output [15:0] x_30_R_o,
						output [15:0] x_30_I_o,
						output [15:0] x_31_R_o,
						output [15:0] x_31_I_o

					  );


reg [15:0] x_0_R_r ,  x_0_I_r,
   		   x_1_R_r ,  x_1_I_r, 
   		   x_2_R_r ,  x_2_I_r, 
   		   x_3_R_r ,  x_3_I_r, 
   		   x_4_R_r ,  x_4_I_r, 
   		   x_5_R_r ,  x_5_I_r,
   		   x_6_R_r ,  x_6_I_r, 
   		   x_7_R_r ,  x_7_I_r,
   		   x_8_R_r ,  x_8_I_r, 
   		   x_9_R_r ,  x_9_R_r, 
   		   x_10_R_r, x_10_I_r,
   		   x_11_R_r, x_11_I_r,
   		   x_12_R_r, x_12_I_r,
   		   x_13_R_r, x_13_I_r,
   		   x_14_R_r, x_14_I_r,
   		   x_15_R_r, x_15_I_r,
   		   x_16_R_r, x_16_I_r,
   		   x_17_R_r, x_17_I_r,
   		   x_18_R_r, x_18_I_r,
   		   x_19_R_r, x_19_R_r,
   		   x_20_R_r, x_20_I_r,
   		   x_21_R_r, x_21_I_r,
   		   x_22_R_r, x_22_I_r,
   		   x_23_R_r, x_23_I_r,
   		   x_24_R_r, x_24_I_r,
   		   x_25_R_r, x_25_I_r,
   		   x_26_R_r, x_26_I_r,
   		   x_27_R_r, x_27_I_r,
   		   x_28_R_r, x_28_I_r,
   		   x_29_R_r, x_29_R_r,
   		   x_30_R_r, x_30_I_r,
   		   x_31_R_r, x_31_I_r;

reg [15:0] X_0_R_r ,  X_0_I_r,
   		   X_1_R_r ,  X_1_I_r,
   		   X_2_R_r ,  X_2_I_r,
   		   X_3_R_r ,  X_3_I_r,
   		   X_4_R_r ,  X_4_I_r,
   		   X_5_R_r ,  X_5_I_r,
   		   X_6_R_r ,  X_6_I_r,
   		   X_7_R_r ,  X_7_I_r,
   		   X_8_R_r ,  X_8_I_r,
   		   X_9_R_r ,  X_9_R_r,
   		   X_10_R_r, X_10_I_r,
   		   X_11_R_r, X_11_I_r,
   		   X_12_R_r, X_12_I_r,
   		   X_13_R_r, X_13_I_r,
   		   X_14_R_r, X_14_I_r,
   		   X_15_R_r, X_15_I_r,
   		   X_16_R_r, X_16_I_r,
   		   X_17_R_r, X_17_I_r,
   		   X_18_R_r, X_18_I_r,
   		   X_19_R_r, X_19_R_r,
   		   X_20_R_r, X_20_I_r,
   		   X_21_R_r, X_21_I_r,
   		   X_22_R_r, X_22_I_r,
   		   X_23_R_r, X_23_I_r,
   		   X_24_R_r, X_24_I_r,
   		   X_25_R_r, X_25_I_r,
   		   X_26_R_r, X_26_I_r,
   		   X_27_R_r, X_27_I_r,
   		   X_28_R_r, X_28_I_r,
   		   X_29_R_r, X_29_R_r,
   		   X_30_R_r, X_30_I_r,
   		   X_31_R_r, X_31_I_r;   


reg [15:0] fft_R_sample_r;
reg [15:0] fft_I_sample_r;

reg byte_cnt;
reg flag_start_r;

 
assign stream_finished_8  = ( (fft_select_r == SELECT_FFT8 ) && (byte_cnt == 32'd8 ) );
assign stream_finished_16 = ( (fft_select_r == SELECT_FFT16) && (byte_cnt == 32'd16) );
assign stream_finished_32 = ( (fft_select_r == SELECT_FFT32) && (byte_cnt == 32'd32) );




    // FSM State




    // FSM States
    always @(posedge clk) begin
        
        if(rst) begin

            current_state 			<= `FSM_IDLE;
            fft_R_coefficient_r		<= 16'd0;
			fft_I_coefficient_r     <= 16'd0;
			fft_R_sample_r 			<= 16'd0; 
			fft_I_sample_r 			<= 16'd0;
			fft_select_r   			<=  2'd0;
			valid_tx_r 				<= `LOW;
			valid_rx_r              <= `LOW;
			ena_rx_r 				<= `LOW;
			ena_tx_r 				<= `LOW;
			flag_start_r            <= `LOW;

        end
        else begin

            current_state 			<= next_state;
            fft_R_coefficient_r		<= fft_R_coefficient_i;
			fft_I_coefficient_r     <= fft_I_coefficient_i;
			fft_R_sample_r          <= fft_R_sample_i;
			fft_I_sample_r          <= fft_I_sample_i;
			flag_start_r			<= flag_start_i;
			flag_sample_valid_r		<= flag_sample_valid_i



        end
    end
    // UART FSM
    always @(*) begin

        next_state  		 = current_state;
        valid_o     		 = `LOW;


        // Check for 
        if(stream_finished_8) begin
        	next_state 		 = 
        end
        


        case (current_state)

            `FSM_IDLE: begin

                fft_R_sample_r = 15'd0;
                fft_I_sample_r = 15'd0;

                if(flag_start_r == `HIGH) begin

                   	next_state = `FSM_SAMPLE_0;

                end

            end


            `FSM_SAMPLE_0: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_0_R_r 		       = fft_R_sample_r;
					x_0_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_1;

                end
            end

            `FSM_SAMPLE_1: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_1_R_r 		       = fft_R_sample_r;
					x_1_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_2;


                end
            end

            `FSM_SAMPLE_2: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_2_R_r 		       = fft_R_sample_r;
					x_2_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_3;

                end
            end

            `FSM_SAMPLE_3: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_3_R_r 		       = fft_R_sample_r;
					x_3_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_4;

                end
            end

            `FSM_SAMPLE_4: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_4_R_r 		       = fft_R_sample_r;
					x_4_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_5;

                end
            end

            `FSM_SAMPLE_5: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_5_R_r 		       = fft_R_sample_r;
					x_5_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_6;

                end
            end

            `FSM_SAMPLE_6: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_6_R_r 		       = fft_R_sample_r;
					x_6_I_r         	   = fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_7;

                end
            end

            `FSM_SAMPLE_7: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_7_R_r 		       =  fft_R_sample_r;
					x_7_I_r         	   =  fft_I_sample_r;

					if(fft_select_r == SELECT_FFT8) begin:
						next_state    	   = `FSM_SAMPLE_W0;
					end
					else begin:
						next_state    	   = `FSM_SAMPLE_W0;
					end


                end
            end

            `FSM_SAMPLE_W0: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_7_R_r 		       = fft_R_sample_r;
					x_7_I_r         	   = fft_I_sample_r;
					byte_cnt               = byte_cnt + 6'd1;
	                next_state      	   = `FSM_SAMPLE_8;

                end
            end


            `FSM_SAMPLE_8: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_2_R_r 		       =  fft_R_sample_r;
					x_2_I_r         	   =  fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_3;

                end
            end

            `FSM_SAMPLE_9: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_3_R_r 		       =  fft_R_sample_r;
					x_3_I_r         	   =  fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_1;

                end
            end

            `FSM_SAMPLE_10: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_4_R_r 		       =  fft_R_sample_r;
					x_4_I_r         	   =  fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_11;

                end
            end

            `FSM_SAMPLE_11: begin
         	
				if(flag_sample_valid_r == `HIGH) begin

					x_5_R_r 		       =  fft_R_sample_r;
					x_5_I_r         	   =  fft_I_sample_r;
                	next_state      	   = `FSM_SAMPLE_3;

                end
            end     

        endcase


    end



assign x_0_R_o    =   x_0_R_r;
assign x_0_I_o    =   x_0_I_r;
assign x_1_R_o    =   x_1_R_r;
assign x_1_I_o    =   x_1_I_r;
assign x_2_R_o    =   x_2_R_r;
assign x_2_I_o    =   x_2_I_r;
assign x_3_R_o    =   x_3_R_r;
assign x_3_I_o    =   x_3_I_r;
assign x_4_R_o    =   x_4_R_r;
assign x_4_I_o    =   x_4_I_r;
assign x_5_R_o    =   x_5_R_r;
assign x_5_I_o    =   x_5_I_r;
assign x_6_R_o    =   x_6_R_r;
assign x_6_I_o    =   x_6_I_r;
assign x_7_R_o    =   x_7_R_r;
assign x_7_I_o    =   x_7_I_r;
assign x_8_R_o    =   x_8_R_r;
assign x_8_I_o    =   x_8_I_r;
assign x_9_R_o    =   x_9_R_r;
assign x_9_I_o    =   x_9_I_r;
assign x_10_R_o   =   x_10_R_r;
assign x_10_I_o   =   x_10_I_r;
assign x_11_R_o   =   x_11_R_r;
assign x_11_I_o   =   x_11_I_r;
assign x_12_R_o   =   x_12_R_r;
assign x_12_I_o   =   x_12_I_r;
assign x_13_R_o   =   x_13_R_r;
assign x_13_I_o   =   x_13_I_r;
assign x_14_R_o   =   x_14_R_r;
assign x_14_I_o   =   x_14_I_r;
assign x_15_R_o   =   x_15_R_r;
assign x_15_I_o   =   x_15_I_r;
assign x_16_R_o   =   x_16_R_r;
assign x_16_I_o   =   x_16_I_r;
assign x_17_R_o   =   x_17_R_r;
assign x_17_I_o   =   x_17_I_r;
assign x_18_R_o   =   x_18_R_r;
assign x_18_I_o   =   x_18_I_r;
assign x_19_R_o   =   x_19_R_r;
assign x_19_I_o   =   x_19_I_r;
assign x_20_R_o   =   x_20_R_r;
assign x_20_I_o   =   x_20_I_r;
assign x_21_R_o   =   x_21_R_r;
assign x_21_I_o   =   x_21_I_r;
assign x_22_R_o   =   x_22_R_r;
assign x_22_I_o   =   x_22_I_r;
assign x_23_R_o   =   x_23_R_r;
assign x_23_I_o   =   x_23_I_r;
assign x_24_R_o   =   x_24_R_r;
assign x_24_I_o   =   x_24_I_r;
assign x_25_R_o   =   x_25_R_r;
assign x_25_I_o   =   x_25_I_r;
assign x_26_R_o   =   x_26_R_r;
assign x_26_I_o   =   x_26_I_r;
assign x_27_R_o   =   x_27_R_r;
assign x_27_I_o   =   x_27_I_r;
assign x_28_R_o   =   x_28_R_r;
assign x_28_I_o   =   x_28_I_r;
assign x_29_R_o   =   x_29_R_r;
assign x_29_I_o   =   x_29_I_r;
assign x_30_R_o   =   x_30_R_r;
assign x_30_I_o   =   x_30_I_r;
assign x_31_R_o   =   x_31_R_r;
assign x_31_I_o   =   x_31_I_r;







endmodule